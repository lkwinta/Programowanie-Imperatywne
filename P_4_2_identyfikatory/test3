#include <stdio.h>
#include <math.h>
#define N 100
/*
// Generates the sequence of n samples by incrementing the start value
// using the step size (|step| > 1.e-5).
// 0 <= n <= N
// for n = 0 return empty array
// for n = 1 return one-element array, with array[0] = start
void range(double array[], double start, double step, int n) {
    for(int i=0; i<n; start+=step) {
        array[i++] = start;
    }
    return;
}
*/

// Returns n evenly spaced samples, calculated over the interval [start, stop].
// 0 <= n <= N
// for n = 0 return empty array
// for n = 1 return one-element array, with array[0] = start
void linspace(double array[], double start, double stop, int n) {
    if (n == 0) return;
    if (n == 1) {
        array[0] = start;
        return;
    }
    double step = (stop - start) / (n - 1);
    double x = start;
    for (int i = 0; i < n; ++i) {
        array[i] = x;
        x += step;
    }
}

// Multiply each element of v by the value of scalar
void multiply_by_scalar(double v[], int n, double scalar) {
    for (int i = 0; i < n; ++i) {
        v[i] *= scalar;
    }
}

// Add to each element v1[i] value of v2[i]
void add(double v1[], const double v2[], int n) {
    for (int i = 0; i < n; ++i) {
        v1[i] += v2[i];
    }
}

// calculate and return the dot product of v1 and v2
double dot_product(const double v1[], const double v2[], int n) {
    double sum = 0.;
    for (int i = 0; i < n; ++i) {
        sum += v1[i] * v2[i];
    }
    return sum;
}

// read double vector of size n
void read_vector(double v[], int n) {
    for (int i = 0; i < n; ++i) {
        scanf("%lf", v + i);
    }
}

// print double vector of size n (with 2 figures after the decimal point)
void print_vector(const double v[], int n) {
    for (int i = 0; i < n; ++i) {
        printf("%.2f ", v[i]);
    }
    printf("\n");
}